void _torc_preallocate_memory(void);
void torc_to_npq(int node, torc_t *desc);
void torc_to_npq_end(int node, torc_t *desc);

/**
 * @brief Adds the descriptor desc at the head of the queue reuse_q
 * 
 * @param desc 
 */
static void torc_to_i_reuseq(torc_t *desc)
{
    _enqueue_head(&reuse_q, desc);
}


//! Address space layout flag
int aslr_flag = 0;

/**
 * @brief Check the address space layout
 * 
 */
void check_aslr()
{
    MPI_Request request;

    //! Virtual address
    unsigned long vaddr[MAX_NODES];
    unsigned long vaddr_me = (unsigned long)check_aslr;

    enter_comm_cs();
    MPI_Iallgather(&vaddr_me, 1, MPI_UNSIGNED_LONG, vaddr, 1, MPI_UNSIGNED_LONG, comm_out, &request);
    MPI_Wait(&request, MPI_STATUS_IGNORE);
    leave_comm_cs();

#if DEBUG
    if (torc_node_id() == 0)
    {
        for (int i = 0; i < torc_num_nodes(); i++)
        {
            printf("node %2d -> %p\n", i, (void *)vaddr[i]);
        }
    }
#endif

    for (int i = 0; i < torc_num_nodes(); i++)
    {
        if (vaddr_me != vaddr[i])
        {
            aslr_flag = 1;
            return;
        }
    }

    return;
}

/**
 * @brief Get the aslr flag
 * 
 * @return int 
 */
int get_aslr()
{
    return aslr_flag;
}

/**
 * @brief Private global queue
 *
 * @param target_node
 * @param desc
 */
void torc_to_npq(int target_node, torc_t *desc)
{
#if DEBUG
    printf("rte_to_prq_2: target = %d, target_node = %d, target_queue = %s\n", -1, target_node, "intra-node gq");
#endif

    desc->insert_private = 1;
    desc->insert_in_front = 1;
    //! alternatively, it can be set only when it goes outside
    desc->inter_node = 1;
    desc->target_queue = -1;

    if (torc_node_id() != target_node)
    {
#if DEBUG
        printf("enqueing remotely: desc->rte_desc = %p\n", desc);
#endif
        send_descriptor(target_node, desc, TORC_NORMAL_ENQUEUE);

        _torc_put_reused_desc(desc);
    }
    else
    {
#if DEBUG
        printf("enqueing locally: desc->rte_desc = %p\n", desc);
#endif
        read_arguments(desc);

        torc_to_i_pq(desc);
    }
}

void torc_to_npq_end(int target_node, torc_t *desc)
{
#if DEBUG
    printf("rte_to_prq_end_2: target = %d, target_node = %d, target_queue = %s\n", -1, target_node, "intra-node gq");
#endif

    desc->insert_private = 1;
    //! alternatively, it can be set only when it goes outside
    desc->inter_node = 1;
    desc->target_queue = -1;

    if (torc_node_id() != target_node)
    {
#if DEBUG
        printf("enqueing remotely: desc->rte_desc = %p\n", desc);
#endif
        send_descriptor(target_node, desc, TORC_NORMAL_ENQUEUE);

        _torc_put_reused_desc(desc);
    }
    else
    {
#if DEBUG
        printf("enqueing locally: desc->rte_desc = %p\n", desc);
#endif
        read_arguments(desc);

        torc_to_i_pq_end(desc);
    }
}

void torc_to_prq(int target, torc_t *desc)
{
    int target_node = global_thread_id_to_node_id(target);

    torc_to_npq(target_node, desc);
}

#define WAIT_COUNT 2

/* WTH is this? Maybe just a backup of the code? */
int _torc_scheduler_loop2(int once)
{
    while (1)
    {
        torc_t *desc_next = get_next_task();

        while (desc_next == NULL)
        {
            //! Checking for program completion
            if (appl_finished == 1)
            {
                _torc_md_end();
            }

            int wait_count = WAIT_COUNT;
            while (--wait_count)
            {
                sched_yield();
            }

            desc_next = get_next_task();
            if (desc_next == NULL)
            {
                if (once)
                {
                    return 0;
                }
            }
        }

        /* Execute selected task */
        _torc_execute(desc_next);

        if (once)
        {
            return 0; // what is this?
        }
    }
}

void shutdown_worker(int id)
{
    int const this_node = torc_node_id();

    node_info[this_node].nworkers--;
}


